import{_ as t,C as i,c as h,o as l,ay as p,G as a}from"./chunks/framework.CGw6lWU-.js";const y=JSON.parse('{"title":"字符串","description":"","frontmatter":{},"headers":[],"relativePath":"c/string.md","filePath":"c/string.md","lastUpdated":1742025366000}'),k={name:"c/string.md"};function r(d,s,o,c,E,g){const n=i("NolebaseGitContributors"),e=i("NolebaseGitChangelog");return l(),h("div",null,[s[0]||(s[0]=p(`<h1 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h1><p>C语言中的字符串是一个比较让人头疼的问题。首先，C语言中没有独立的字符串数据类型，所以你需要使用「字符数组」来表示字符串。</p><p>这太反人类了！</p><h2 id="字符数组" tabindex="-1">字符数组 <a class="header-anchor" href="#字符数组" aria-label="Permalink to &quot;字符数组&quot;">​</a></h2><p>在C语言中，单引号<code>&#39;&#39;</code>包裹起来的将被视作字符，双引号<code>&quot;&quot;</code>包裹起来的将被视作字符串。</p><p>字符串需要存储在字符数组中。字符类型即<code>char</code>，你可以通过如下方式定义单个字符和字符数组：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Q&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Q&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> qaq1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Q&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Q&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> qaq2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;QAQ&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>字符数组的长度即字符串的长度。但是，C语言要求字符串的末尾（即最后一个有效字符）的后面需要跟一个<code>\\0</code>，表示字符串结束。因此我们看起来长度为3的<code>QAQ</code>需要定义在长度为4的字符数组中。</p><p>在按照第5行的方式依次给出字符时，需要在最后一位给出<code>\\0</code>；按照第6行的方式使用双引号直接给出字符串，则无需手动给出<code>\\0</code>。字符数组的长度可以更长，对于<code>QAQ</code>来说，数组的长度只需要大于3即可，是4或是400都是合法的。</p><div class="tip custom-block"><p class="custom-block-title">一定要有<code>\\0</code>吗？</p><p><strong>是的，C语言中字符串或字符数组必须要以<code>\\0</code>作为结尾。</strong></p><p>C语言需要通过<code>\\0</code>来判断字符串的结束位置；否则，在程序运行的过程中可能会出现意外错误，并且在不同的环境中可能出现不同的意外错误。</p></div><h2 id="输入输出" tabindex="-1">输入输出 <a class="header-anchor" href="#输入输出" aria-label="Permalink to &quot;输入输出&quot;">​</a></h2><h3 id="输出字符串" tabindex="-1">输出字符串 <a class="header-anchor" href="#输出字符串" aria-label="Permalink to &quot;输出字符串&quot;">​</a></h3><p>标准库函数<code>printf</code>用于在控制台打印<strong>字符串</strong>。你不能像其他语言的<code>print</code>或<code>log</code>那样随便传各种类型的值，只能传递字符串。</p><p>但是你可以通过格式控制符将数据嵌入到字符串中，同时可以限定嵌入数据的格式。</p><h3 id="输入" tabindex="-1">输入 <a class="header-anchor" href="#输入" aria-label="Permalink to &quot;输入&quot;">​</a></h3>`,15)),a(n),a(e)])}const b=t(k,[["render",r]]);export{y as __pageData,b as default};
