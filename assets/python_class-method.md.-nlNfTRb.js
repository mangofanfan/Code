import{_ as l,C as a,c as p,o as t,aA as h,G as i}from"./chunks/framework.BPt_yMNM.js";const y=JSON.parse('{"title":"类型方法","description":"","frontmatter":{},"headers":[],"relativePath":"python/class-method.md","filePath":"python/class-method.md","lastUpdated":1744953102000}'),r={name:"python/class-method.md"};function k(d,s,o,c,E,g){const n=a("NolebaseGitContributors"),e=a("NolebaseGitChangelog");return t(),p("div",null,[s[0]||(s[0]=h(`<h1 id="类型方法" tabindex="-1">类型方法 <a class="header-anchor" href="#类型方法" aria-label="Permalink to &quot;类型方法&quot;">​</a></h1><p>前面的章节<a href="/python/class-and-instantiation.html">类型与实例</a>中已经介绍了在类型中定义函数作为方法的概念。</p><h2 id="方法的可访问性" tabindex="-1">方法的可访问性 <a class="header-anchor" href="#方法的可访问性" aria-label="Permalink to &quot;方法的可访问性&quot;">​</a></h2><p>类似于其他面向对象语言，Python中对象的方法和属性也可以声明其可访问性，例如是公有、私有还是保护，只不过这里的可访问性不是通过<code>public</code>、<code>private</code>和<code>protected</code>关键字定义的。</p><p>Python通过在方法或属性名前添加额外的下划线<code>_</code>来指定方法或属性的可访问性。</p><ul><li><code>self.name</code>是公有属性，<code>self.getName()</code>是公有方法；</li><li><code>self._name</code>是私有属性，<code>self._getName()</code>是私有方法；</li><li><code>self.__name</code>是保护属性，<code>self.__getName()</code>是保护方法；</li></ul><p>根据约定俗成的编码规范，不应该从类的外部访问类或对象的私有和保护属性与方法。保护的程度比私有更高一级，在实际编程中的体现如下：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MangoFanFan&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._uuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;123456&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.__password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;999631&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user.name)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user._uuid)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user.__password)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>运行结果如下：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MangoFanFan</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123456</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Traceback (most recent call last):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  File </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c:\\Users\\mango\\Desktop\\Code\\cat.py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, line </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user.__password)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          ^^^^^^^^^^^^^^^</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AttributeError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;User&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> has no attribute </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;__password&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>user.name</code>毫无疑问被成功获取；<code>user._uuid</code>虽然不建议，但也可以成功获取；<code>user.__password</code>无法被从外部直接获取。</p><p>公有方法、私有方法与保护方法间的差别同上。</p><div class="tip custom-block"><p class="custom-block-title">你知道吗？</p><p>通过一些手段可以从类的外部强行访问到类的保护属性：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MangoFanFan&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._uuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;123456&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.__password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;999631&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user.name)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user._uuid)</span></span>
<span class="line diff remove"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user.__password)  </span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user._User__password)  </span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这样就可以打印出<code>user.__password</code>的值<code>999631</code>了，但是这已经背离了保护的初衷，因此仅作了解。</p></div><h3 id="魔术-magic-不在此列" tabindex="-1">魔术（Magic）不在此列 <a class="header-anchor" href="#魔术-magic-不在此列" aria-label="Permalink to &quot;魔术（Magic）不在此列&quot;">​</a></h3><p>Python中存在一些预先定义或约定的特殊变量、属性、方法，它们的命名格式是<code>__xxxx__</code>，比如类型的初始化方法就是<code>__init__()</code>。这些变量、属性、方法即「<strong>魔术变量/魔术方法</strong>」不属于保护属性。</p><h2 id="魔术方法" tabindex="-1">魔术方法 <a class="header-anchor" href="#魔术方法" aria-label="Permalink to &quot;魔术方法&quot;">​</a></h2><p>官方的称呼是<strong>特殊方法</strong>，但我们习惯称之为<strong>魔术方法/魔法方法</strong>。在类型中以<code>__xxxx__</code>命名的方法就是魔术方法，这些方法是Python预先定义或约定好的，不被视为保护方法。</p><p>Python类型的初始化方法/构造函数<code>__init__()</code>正是魔术方法，此外还有许多魔术方法，这些方法可以自定义类型的行为，也是Python面向对象工作的重要工具。</p><p>例如，<code>__init__</code>方法定制了一个类在实例化时需要进行的初始化操作，<code>__del__</code>方法定制了一个类在被释放时（可能是开发者使用<code>del</code>或Python进行垃圾回收时，更大可能性是Python运行结束时。）执行的操作。更多魔术方法会在后面介绍。</p>`,19)),i(n),i(e)])}const b=l(r,[["render",k]]);export{y as __pageData,b as default};
