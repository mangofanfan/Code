import{_ as l,C as a,c as p,o as t,aA as r,G as i}from"./chunks/framework.BPt_yMNM.js";const h="/assets/VSCode%20CCPP%20Extension%20Pack.BBU2QgFD.png",d="/assets/VSCode%20command%20CMake%20Quick%20Start.CxmkjhTj.png",C=JSON.parse('{"title":"CMake","description":"","frontmatter":{},"headers":[],"relativePath":"common/cmake.md","filePath":"common/cmake.md","lastUpdated":1747217727000}'),k={name:"common/cmake.md"};function c(o,s,b,u,E,m){const n=a("NolebaseGitContributors"),e=a("NolebaseGitChangelog");return t(),p("div",null,[s[0]||(s[0]=r(`<h1 id="cmake" tabindex="-1">CMake <a class="header-anchor" href="#cmake" aria-label="Permalink to &quot;CMake&quot;">​</a></h1><p>在使用C或C++开发体量较大的项目时，你将需要通过更方便的工具来完成项目从源码到成品的构建与生成。芒果帆帆墙裂推荐各位<a href="/common/wsl.html">首先安装WSL</a>，然后在Linux虚拟机中 <s>游玩</s> 实践CMake，以及实践任何C/C++项目，以避免一些可能奇奇怪怪、“Only work on my computer”的问题。</p><p>关于C与C++中如何通过头文件来组织多文件之间的依赖关系，请分别参见：</p><ul><li>C：<a href="/c/head-file.html">模块化与头文件</a></li><li>C++：<a href="/cpp/head-file.html">模块化与头文件</a></li><li>C++：<a href="/cpp/work-with-c.html">与C协同使用</a></li></ul><h2 id="安装-cmake" tabindex="-1">安装 CMake <a class="header-anchor" href="#安装-cmake" aria-label="Permalink to &quot;安装 CMake&quot;">​</a></h2><h3 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">​</a></h3><p>在Windows下，前往CMake的官网下载安装包（文件拓展名为<code>.msi</code>），然后无脑安装即可。注意安装时需要选择<code>Add CMake to the system PATH for all users</code>，可以免去配置环境变量的痛苦。</p><h3 id="linux" tabindex="-1">Linux <a class="header-anchor" href="#linux" aria-label="Permalink to &quot;Linux&quot;">​</a></h3><p>以WSL Ubuntu为例，运行如下命令安装：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sodu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果你的Linux上此前没有，或不确定是否存在已有的C/C++环境，则建议完整运行下面的命令：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新包列表: 更新包管理器的包列表，确保你能从最新的仓库中获取软件。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装 GCC 编译器 : GCC 是 GNU Compiler Collection 的简称，是最常用的C 和 C++ 编译器。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装构建工具: build-essential 包提供了很多开发标准C和C++程序所需的工具。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 包括 g++（GNU C++ 编译器）、make（用于自动化编译的工具）和一些其他必要的库和开发文件。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build-essential</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装调试工具</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gdb</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装检测内存泄漏工具 valgrind</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> valgrind</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装CMake</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># https://zhuanlan.zhihu.com/p/687454451</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>完成安装之后，新建一个终端并运行<code>cmake</code>以检查是否安装成功。</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Usage</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  cmake [options] &lt;path-to-source&gt;</span></span>
<span class="line"><span>  cmake [options] &lt;path-to-existing-build&gt;</span></span>
<span class="line"><span>  cmake [options] -S &lt;path-to-source&gt; -B &lt;path-to-build&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Specify a source directory to (re-)generate a build system for it in the</span></span>
<span class="line"><span>current working directory.  Specify an existing build directory to</span></span>
<span class="line"><span>re-generate its build system.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Run &#39;cmake --help&#39; for more information.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="配置ide以支持cmake" tabindex="-1">配置IDE以支持CMake <a class="header-anchor" href="#配置ide以支持cmake" aria-label="Permalink to &quot;配置IDE以支持CMake&quot;">​</a></h2><p>一个项目是否使用CMake，最简单直观的判断方式就是检查其目录下是否存在名为<code>CMakeLists.txt</code>的文件。接下来，我们首先让我们的IDE支持此类型的文件。</p><h3 id="visual-studio-code" tabindex="-1">Visual Studio Code <a class="header-anchor" href="#visual-studio-code" aria-label="Permalink to &quot;Visual Studio Code&quot;">​</a></h3><p>在VSCode的拓展商店中搜索CMake Tools，选择来自Microsoft的拓展并安装，即可启用VSCode的CMake支持。支持CMake，仅需此一个拓展即可。</p><p>拓展CMake Tools还包含在C/C++ Extension Pack中，因此你可以选择直接安装此拓展包。</p><p><img src="`+h+'" alt="VSCode中的C/C++ Extension Pack" data-zoomable="true"></p><p>安装完成后，无论在Windows环境或WSL环境中均可直接使用这套方案。在使用VSCode打开的新项目中输入或选择命令<code>CMake: Quick Start</code>，然后经过一个简短的设置过程，即可生成你的第一个<code>CMakeLists.txt</code>文件。</p><p><img src="'+d+`" alt="VSCode中的CMake快速开始命令" data-zoomable="true"></p><h3 id="clion" tabindex="-1">CLion <a class="header-anchor" href="#clion" aria-label="Permalink to &quot;CLion&quot;">​</a></h3><p>Jetbrains CLion内置了开箱即用的对CMake的支持，可直接使用。正常使用CLion新建项目，<code>CMakeLists.txt</code>将自动生成。</p><h2 id="cmakelists-txt" tabindex="-1">CMakeLists.txt <a class="header-anchor" href="#cmakelists-txt" aria-label="Permalink to &quot;CMakeLists.txt&quot;">​</a></h2><p>此文件中按照约定的语法，存储了当前项目的构建信息，包括使用哪个版本的CMake、使用哪些标准的C或C++、根据哪些代码文件生成哪些可执行程序或库文件、将哪些库文件链接到哪些可执行程序……</p><p>配置成功后，对此文件的任何编辑都将触发IDE的自动构建，以检查编辑后的<code>CMakeLists.txt</code>是否仍然合法。当然，合法不代表正式构建时不会出现问题，总之先来学语法吧。</p><p>使用VSCode的快速开始生成的<code>CMakeLists.txt</code>文件如下：</p><div class="language-cmake vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.10.0)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CppTest9 </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0.1.0 LANGUAGES C CXX)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CppTest9 main.cpp)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>此默认生成的文件首行设置了最低CMake版本为3.10.0，一般无需改动此选项，除非日后你需要用到CMake的高级功能；第二行设置了项目的名称「CppTest9」、项目的版本「0.1.0」和项目的语言「C和CXX」。CXX在这里即指代C++。</p><p>由CLion自动生成的<code>CMakeLists.txt</code>文件如下：</p><div class="language-cmake vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.30)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(QQCode C)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CMAKE_C_STANDARD 11)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(QQCode main.c)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>相比VSCode生成的文件，CLion额外限制了语言标准（C 11），这实际上是在创建项目时CLion要求用户设置的。由此可见，在前面的设置上，基本无需我们过多操心，IDE可以完全胜任项目基本信息的配置工作。</p><p>我们真正需要操心的就是构建编译设置。正巧最近，芒果帆帆刚刚炸完C++程序设计实践的鱼，遂拿其中实现得比较复杂的一道题目来作为介绍吧。</p><p>GitHub：<strong>CppTest_BasicSort</strong>：<a href="https://github.com/mangofanfan/CppTest_BasicSort" target="_blank" rel="noreferrer">https://github.com/mangofanfan/CppTest_BasicSort</a></p><div class="language-cmake vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.10.0)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CppTest1 </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0.1.0 LANGUAGES CXX)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLOB_RECURSE Sortlib_SRC</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;\${CMAKE_CURRENT_SOURCE_DIR}/sortlib/*.cxx&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;\${CMAKE_CURRENT_SOURCE_DIR}/sortlib/*.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sortlib STATIC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${Sortlib_SRC}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CppTest1_cmd main.cxx)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CppTest1_word word.cxx)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_include_directories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CppTest1_cmd </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sortlib)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_include_directories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CppTest1_word </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sortlib)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CppTest1_cmd </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sortlib)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CppTest1_word </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sortlib)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="add-executable" tabindex="-1">add_executable <a class="header-anchor" href="#add-executable" aria-label="Permalink to &quot;add_executable&quot;">​</a></h3><p>项目的根目录下拥有<code>main.cxx</code>和<code>word.cxx</code>两个入口文件，其中分别有一个<code>main()</code>函数，显然不应该将他们一起构建成一个可执行程序。</p><p><code>add_executable</code>语句用于增加生成一个可执行程序，接收的首个参数是生成的程序名，后面可以跟随多个用于编译的源代码文件。</p><div class="language-cmake vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CppTest1_cmd main.cxx)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CppTest1_word word.cxx)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>例如CppTest_BasicSort中，我们分别为两个入口文件各自生成一个可执行程序。构建完成后，<code>CppTest1_cmd</code>和<code>CppTest1_word</code>会出现在<code>build</code>目录下，运行他们即运行<code>main.cxx</code>和<code>word.cxx</code>。</p><h3 id="add-library" tabindex="-1">add_library <a class="header-anchor" href="#add-library" aria-label="Permalink to &quot;add_library&quot;">​</a></h3><p>公共的排序方法被芒果帆帆扔到了目录<code>sortlib</code>下，其中<code>sortlib.h</code>是头文件，而<code>sortlib.cxx</code>是源码文件。我们需要<code>main.cxx</code>和<code>word.cxx</code>都能使用这其中定义的排序函数，因此将其以库的形式独立实现，并作为静态库编译构建。</p><div class="language-cmake vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GLOB_RECURSE Sortlib_SRC</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;\${CMAKE_CURRENT_SOURCE_DIR}/sortlib/*.cxx&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;\${CMAKE_CURRENT_SOURCE_DIR}/sortlib/*.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sortlib STATIC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${Sortlib_SRC}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>我们首先通过<code>file</code>来搜索指定目录下的所有名称符合要求的文件。<code>GLOB_RECURSE</code>用来帮助我们使用<code>\${CMAKE_CURRENT_SOURCE_DIR}</code>变量确定当前位置地搜索文件，<code>Sortlib_SRC</code>是我们为搜索到的所有文件起的别名，后跟数个我们需要的文件即可。</p><p>搜索之后，使用<code>add_library</code>添加一个库，起名为<code>sortlib</code>，<code>STATIC</code>表示编译为静态链接库，<code>\${Sortlib_SRC}</code>就是我们搜索到的那些文件了。这样我们就将所有符合条件的源文件编译为了名为<code>sortlib</code>的库，然后需要做的就是将库与可执行程序链接起来。</p><div class="language-cmake vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_include_directories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CppTest1_cmd </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sortlib)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_include_directories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CppTest1_word </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sortlib)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CppTest1_cmd </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sortlib)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CppTest1_word </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sortlib)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><code>target_include_directories</code>用来指定我们的程序在哪里搜索头文件。我们的两个入口文件的头部都用<code>include &quot;sortlib.h&quot;</code>包含了sortlib中的方法，因此需要指定搜索头文件的路径<code>sortlib</code>。注意此处的<code>sortlib</code>是目录而不是上面<code>add_library</code>得到的库。</p><p><code>target_link_libraries</code>用来将库链接到可执行程序，这里的<code>sortlib</code>就是我们的排序库了。由于在编译可执行程序时没有包含sortlib，我们需要在这里将sortlib链接到程序，否则程序运行时将无法使用我们的排序方法。</p><p>这里的<code>PRIVATE</code>表明后者仅在前者中可用，而其他依赖前者的项目不会自动继承后者。</p><p>然后，在你的VSCode的底部命令栏中选择「生成」或直接选择「运行」，或在CLion中的顶部导航栏选择「运行」，CMake将开始根据<code>CMakeLists.txt</code>构建这个项目。构建结果会放在<code>build</code>目录下，接下来你就可以运行项目了：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./build/CppTest1_cmd</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./build/CppTest1_word</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,52)),i(n),i(e)])}const y=l(k,[["render",c]]);export{C as __pageData,y as default};
