import{_ as i,C as a,c as l,o as d,aA as r,G as o}from"./chunks/framework.BPt_yMNM.js";const f=JSON.parse('{"title":"编码建议","description":"","frontmatter":{},"headers":[],"relativePath":"common/advice.md","filePath":"common/advice.md","lastUpdated":1741796011000}'),n={name:"common/advice.md"};function s(p,e,h,m,u,_){const t=a("NolebaseGitContributors"),c=a("NolebaseGitChangelog");return d(),l("div",null,[e[0]||(e[0]=r('<h1 id="编码建议" tabindex="-1">编码建议 <a class="header-anchor" href="#编码建议" aria-label="Permalink to &quot;编码建议&quot;">​</a></h1><p>一些编码建议是在你使用任何语言时都最好遵守的，或者是作为编码人员所需要了解的。</p><h2 id="命名" tabindex="-1">命名 <a class="header-anchor" href="#命名" aria-label="Permalink to &quot;命名&quot;">​</a></h2><h3 id="规范命名" tabindex="-1">规范命名 <a class="header-anchor" href="#规范命名" aria-label="Permalink to &quot;规范命名&quot;">​</a></h3><p>至少在同一个项目中，拥有一个在项目级别统一的规范命名风格时很有必要的。在此基础上，不同的语言可能会有不同的建议，但需要避免出现不同风格的命名混用的情况 <s>，除非这个项目已经被很多不同的命名风格污染了，那就破罐破摔吧</s></p><h3 id="命名理念" tabindex="-1">命名理念 <a class="header-anchor" href="#命名理念" aria-label="Permalink to &quot;命名理念&quot;">​</a></h3><p>很多人觉得命名是一件并不重要的事情，在代码中直接<code>a</code>、<code>b</code>、<code>c</code>起手，在写小玩具比如写一个只用几次的脚本，或者做一个十分的编程题的时候感觉良好，等过了两个小时再回来看就完全糊涂了。</p><p>命名不是信口捏来的事情，例如给变量命名，将用户名变量命名为<code>username</code>，是远比写成<code>a</code>要清晰的。我们通常仅在短暂出现、含义清晰的过程变量中使用这种随意的命名方式，比如循环计数<code>i</code>，或是一些语言约定了不被使用的变量写作<code>_</code>，等。</p><h3 id="命名风格" tabindex="-1">命名风格 <a class="header-anchor" href="#命名风格" aria-label="Permalink to &quot;命名风格&quot;">​</a></h3><p>一般来说，常用的命名风格是：</p><ul><li><code>simple_variable</code> - 全小写，中间使用下划线分隔不同单词，可以用做普通变量；</li><li><code>simpleFunction</code> - 驼峰命名法的一种，首字母小写，往后的单词首字母大写，单词之间不分隔，可以用做函数名、方法名、对象名；</li><li><code>SimpleClass</code> - 驼峰命名法的一种，所有单词首字母大写，单词之间不分隔，可以用做类型名；</li><li><code>SIMPLE_CONST</code> - 普遍用作常量命名。</li></ul><div class="warning custom-block"><p class="custom-block-title">中文命名？</p><p>无论任何时候，都不建议在代码层面使用中文汉字或拼音来命名。</p></div><h2 id="提问" tabindex="-1">提问 <a class="header-anchor" href="#提问" aria-label="Permalink to &quot;提问&quot;">​</a></h2><h3 id="为什么不建议中文命名" tabindex="-1">为什么不建议中文命名？ <a class="header-anchor" href="#为什么不建议中文命名" aria-label="Permalink to &quot;为什么不建议中文命名？&quot;">​</a></h3><p>作为开发者，掌握英文是基本功。</p><p>这与身为哪个国家的人无关，丹麦瑞典俄罗斯的程序员照样要用英文写关键字，照样要读写英文的文档。</p><p>我们当然可以把一门语言中所有的关键字全部设置汉字别名，然后用汉字定义和命名一切，写成一种很新的代码，比如<code>数据库对象.用户名为(用户名).密码为(密码).地址为(地址).尝试次数为(尝试次数).连接()</code>，只要兼容UTF-8的现代语言都可以这么做，但是这有必要吗？</p><p>你往往会发现，将一切都变成汉字，在实际上并没有对你的编码起到你期待的正面效果。否则的话，易语言早就该成为国内程序员的第一大热门语言了。</p><h3 id="不同语言怎么长得这么像" tabindex="-1">不同语言怎么长得这么像？ <a class="header-anchor" href="#不同语言怎么长得这么像" aria-label="Permalink to &quot;不同语言怎么长得这么像？&quot;">​</a></h3><p>事实上，参照相似的需求设计出来的编程语言，具有一定的相似程度是完全合理且正常的，无需大惊小怪。</p><p>三目运算符，一行完成条件判断与赋值；面向对象，继承构造与封装……</p><p>所以，总有人说学完一门语言之后，接着上手其他语言就会变得比较容易，这也是有道理的。</p>',22)),o(t),o(c)])}const q=i(n,[["render",s]]);export{f as __pageData,q as default};
